#include<iostream>
using namespace std;

// Nhap danh sách kiên ket don các so nguyên
// ============ KHAI BÁO C?U TRÚC DANH SÁCH LIÊN K?T ÐON ============
struct node
{
	int data; // du lieu cua 1 node
	struct node *pNext; // con tro dùng de liên ket giua các node voi nhau
};
typedef struct node NODE;

// khai báo cau trúc danh sách liên ket don
struct list
{ 
	NODE *pHead;
	NODE *pTail;
};
typedef struct list LIST;
// ============ KHOI TAO CAU TRÚC DANH SÁCH LIÊN KET ÐON ===========
void KhoiTaoDSLK(LIST &l)
{
	// cho 2 node dau và cuoi tro den vùng nho rong
	l.pHead = NULL;
	l.pTail = NULL;
}

// hàm khoi tao 1 cái node
NODE *KhoiTaoNode(int x)
{
	NODE *p = new NODE;
	if (p == NULL)
	{
		cout << "\nKhong du bo nho de cap phat !";
		return NULL;
	}
	p->data = x; // gán x cho data
	p->pNext = NULL;
	return p;
}


// hàm thêm node p vào dau danh sách
void ThemVaoDau(LIST &l, NODE *p)
{
	// danh sách dang rong
	if (l.pHead == NULL)
	{
		l.pHead = l.pTail = p;
	}
	else
	{
		p->pNext = l.pHead; // dùng con tro cua node p liên ket voi l.pHead
		l.pHead = p; // cap nhat lai l.pHead là p
	}
}

// hàm thêm node p vào cuoi danh sách
void ThemVaoCuoi(LIST &l, NODE *p)
{
	// danh sách dang rong
	if (l.pHead == NULL)
	{
		l.pHead = l.pTail = p;
	}
	else
	{
		l.pTail->pNext = p;
		l.pTail = p; // cap nhat lai l.pTail là p
	}
}

// xuat danh sách liên ket don
void XuatDanhSach(LIST l)
{
	for (NODE *k = l.pHead; k != NULL; k = k->pNext)
	{
		cout << k->data << "  ";
	}
}

// Thêm node p vào sau node q(nam trong danh sách liên ket don)
void ThemNode_p_VaoSauNode_q(LIST &l, NODE *p) //them bat ky vi tri
{
	int x;
	cout << "\nNhap gia tri node q: ";
	cin >> x;
	NODE *q = KhoiTaoNode(x);

	// neu danh sách chi có 1 phan tu và phan tu dó cung chính là node q ==> bài toán tro thành ki thuat thêm vào cuoi danh sách
	if (q->data == l.pHead->data && l.pHead->pNext == NULL)
	{
		ThemVaoCuoi(l, p);
	}
	else
	{
		// duyet tu dau danh sách den cuoi danh sách de tìm node q
		for (NODE *k = l.pHead; k != NULL; k = k->pNext)
		{
			// neu node q có t?n t?i thì....
			if (q->data == k->data)
			{
				NODE *h = KhoiTaoNode(p->data); // khoi tao node h moi de thêm vào sau node q 
				NODE *g = k->pNext; // cho node g tro den node nam sau node q
				h->pNext = g; // Buoc 1: Tao moi liên ket tu node h den node g <=> cung chính là tao moi liên ket tu node h den node nam sau node q
				k->pNext = h; // Buoc 2: Tao moi liên ket tu node q den node h <=> chính là node k den node h
			}
		}
	}
}
void xoaDau(LIST &l)
{
	l.pHead=l.pHead->pNext;
}
void xoaCuoi(LIST &l)
{
	NODE *p=l.pHead;
	while(p->pNext->pNext!=NULL) {
		p=p->pNext;
	}
	p->pNext=NULL;	
}
// menu
void Menu(LIST &l)
{
	int luachon;
	while (69)
	{
		system("cls");
		cout << "\n\n\t\t========== Menu ==========";
		cout << "\n\t1. Them node vao danh sach";
		cout << "\n\t2. Xuat danh sach lien ket don";
		cout << "\n\t3. Them node p vao sau node q trong danh sach";
		cout << "\n\t0. Thoat";
		cout << "\n\n\t\t========== End ===========";

		cout << "\nNhap lua chon: ";
		cin >> luachon;

		if (luachon < 0 || luachon > 3)
		{
			cout << "\nLua chon khong hop le. Xin kiem tra lai !";
			system("pause"); // dung màn hình
		}
		else if (luachon == 1)
		{
			int x;
			cout << "\nNhap gia tri so nguyen: ";
			cin >> x;
			NODE *p = KhoiTaoNode(x); // khoi tao 1 cái node
			ThemVaoCuoi(l, p); // thêm node vào cuoi danh sách
		}
		else if (luachon == 2)
		{
			XuatDanhSach(l);
			system("pause");
		}
		else if (luachon == 3)
		{
			int x;
			cout << "\nNhap gia tri node p can them vao sau: ";
			cin >> x;
			NODE *p = KhoiTaoNode(x);
			ThemNode_p_VaoSauNode_q(l, p); // thêm node p vào sau node q trong danh sách l
		}
		else
		{
			break; // thoát khoi vòng lap hien tai
		}
	}
}

int main()
{
	LIST l;
	KhoiTaoDSLK(l); // luôn luôn goi hàm khoi tao danh sách liên ket don truoc khi thao tác voi danh sách
	Menu(l);

	system("pause");
	return 0;
}